generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model characters {
  id              Int                @id @default(autoincrement())
  name            String
  description     String?
  systemTemplate  String?
  firstSituation  String?
  firstMessage    String?
  visibility      String?
  safetyFilter    Boolean?
  category        String?
  hashtags        String[]
  detailSetting   String?
  characterImages character_images[]
  favorites       favorites[]
  interactions    interactions[]
}

model users {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String
  phone        String         @unique
  nickname     String         @unique
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  favorites    favorites[]
  interactions interactions[]
  sessions     sessions[]
}

model character_images {
  id           Int        @id @default(autoincrement())
  imageUrl     String
  keyword      String?
  isMain       Boolean    @default(false)
  displayOrder Int        @default(0)
  createdAt    DateTime?  @default(now()) @db.Timestamptz(6)
  characterId  Int
  character    characters @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_character")
}

model favorites {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  character_id Int?
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, character_id])
}

model interactions {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  character_id Int?
  message      String
  is_user      Boolean
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  session_token String    @unique
  expires_at    DateTime? @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
