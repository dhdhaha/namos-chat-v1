generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model characters {
  id              Int                @id @default(autoincrement())
  name            String
  description     String?
  systemTemplate  String?
  firstSituation  String?
  firstMessage    String?
  visibility      String?
  safetyFilter    Boolean?
  category        String?
  hashtags        String[]
  detailSetting   String?
  author_id       Int?
  createdAt       DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime           @default(now()) @db.Timestamptz(6)
  characterImages character_images[]
  author          users?             @relation(fields: [author_id], references: [id])
  chat            chat[]
  favorites       favorites[]
  interactions    interactions[]
}

model users {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  name             String
  phone            String         @unique
  nickname         String         @unique
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  image_url        String?
  bio              String?
  safetyFilter     Boolean        @default(true)
  defaultPersonaId Int?
  role             String         @default("USER") @db.VarChar(50)
  characters       characters[]
  chat             chat[]
  favorites        favorites[]
  following        follows[]      @relation("follower")
  followers        follows[]      @relation("following")
  interactions     interactions[]
  personas         personas[]
  points           points?
  sessions         sessions[]
}

model character_images {
  id           Int        @id @default(autoincrement())
  imageUrl     String
  keyword      String?
  isMain       Boolean    @default(false)
  displayOrder Int        @default(0)
  createdAt    DateTime?  @default(now()) @db.Timestamptz(6)
  characterId  Int
  character    characters @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_character")
}

model favorites {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  character_id Int?
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, character_id])
}

model interactions {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  character_id Int?
  message      String
  is_user      Boolean
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  session_token String    @unique
  expires_at    DateTime? @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model points {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  free_points Int      @default(0)
  paid_points Int      @default(0)
  updated_at  DateTime @default(now())
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model chat {
  id           Int            @id @default(autoincrement())
  userId       Int
  characterId  Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  characters   characters     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  users        users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat_message chat_message[]
}

model chat_message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  role      String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now())
  chat      chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model follows {
  followerId  Int
  followingId Int
  follower    users @relation("follower", fields: [followerId], references: [id])
  following   users @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model personas {
  id          Int      @id @default(autoincrement())
  nickname    String   @db.VarChar(20)
  age         Int?
  gender      String?  @db.VarChar(255)
  description String   @db.VarChar(1000)
  createdAt   DateTime @default(now())
  authorId    Int
  users       users    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model notices {
  id        Int      @id @default(autoincrement())
  category  String   @db.VarChar(50)
  title     String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now()) @db.Timestamp(6)
}
